Домашнее задание
Задание со списками

Создайте класс Student с полями name (String) и grade (int).

Создайте список ArrayList<Student> и добавьте в него 5 студентов.

Напишите метод, который будет выводить на экран всех студентов с оценкой выше заданного
порога(например, выше 70).

Удалите из списка всех студентов, у которых оценка ниже 50.

1. Списки и массивы
Вопрос 1
Чем отличается массив (Array) от списка (ArrayList) в Java?
Ответ:
- У массива фиксированный размер, который задаётся при создании и не может быть изменён.
- У ArrayList динамический размер: при необходимости он может расширяться или сужаться.
- Массив может содержать примитивы или объекты напрямую, а ArrayList работает
только с объектами (в том числе с wrapper-классами для примитивов).
- Добавлять и удалять элементы из массива неудобно (нужно вручную управлять
индексами или создавать новый массив), а в ArrayList есть удобные методы add(),
remove(), clear() и т. д.

Вопрос 2
Какие основные операции более удобны в ArrayList, чем в массиве?
Ответ:
- Добавление элемента в конец (или в середину) списка без ручного изменения размера.
- Удаление элементов (с последующим сдвигом, который берёт на себя ArrayList).
- Поиск элемента с помощью методов contains(), indexOf() и т. д.

Вопрос 3
Какие сложности (Big O) у следующих операций в ArrayList: добавление в конец,
удаление по индексу, поиск по индексу?
Ответ:
- Добавление в конец (амортизированно) — O(1).
- Удаление по индексу — O(n), так как нужно сдвигать все элементы справа от удаляемого.
- Поиск (получение) по индексу — O(1).

Вопрос 4
Как и когда стоит использовать массив, а не ArrayList?
Ответ:
- Если размер данных известен заранее и не изменяется в процессе работы программы
(например, набор констант).
- Если требуется максимальная производительность при доступе к элементам, и при этом
не нужно динамически изменять размер.
- Если важны вопросы использования памяти (массив может быть более “лёгким”,
чем ArrayList, особенно для примитивных типов).

Вопрос 5
Какие есть аналогичные структуры данных, кроме ArrayList, в Java, и чем они отличаются?
Ответ:
- LinkedList: хранит элементы в связанных узлах, обеспечивает эффективное
добавление/удаление в начало и конец, но медленный доступ по индексу (O(n)).
- Vector: устаревший аналог ArrayList, методы синхронизированы, что замедляет
работу при однопоточном использовании.
- CopyOnWriteArrayList: потокобезопасная реализация списка, при каждом изменении
списка копирует весь массив (используется для многопоточности).

2. Методы списков
Вопрос 6
Какие методы добавления в список (ArrayList) вы знаете?
Ответ:
- add(E e) — добавляет элемент в конец списка.
- add(int index, E element) — вставляет элемент на указанный индекс, сдвигая остальные
элементы.
- При необходимости можно также использовать set(int index, E element) для замены
элемента, но это не добавление, а перезапись.

Вопрос 7
Чем отличается add(int index, E element) от set(int index, E element)?
Ответ:
- add(int index, E element) вставляет элемент на позицию index, сдвигая существующие
элементы вправо и увеличивая размер списка.
- set(int index, E element) заменяет существующий элемент, не меняя размер списка.

Вопрос 8
Как проверить, есть ли определённый элемент в списке (ArrayList)?
Ответ:
- Можно использовать метод contains(Object o), который вернёт true, если элемент
присутствует в списке.
- Также можно использовать indexOf(Object o) (вернёт -1, если элемента нет).

Вопрос 9
Как удалить элемент из списка?
Ответ:
- По индексу: remove(int index).
- По объекту: remove(Object o).
- Полностью очистить: clear() — удаляет все элементы.

Вопрос 10
Для чего используется метод get(int index)?
Ответ:
- Для получения элемента списка по индексу. Если индекс выходит за границы списка,
будет выброшено исключение IndexOutOfBoundsException.

Вопрос 11
Что происходит в ArrayList, когда ему не хватает места для нового элемента?
Ответ:
- Внутри ArrayList хранится массив. Когда он заполняется, создаётся новый увеличенный
массив, и все элементы копируются в него. Обычно размер нового массива равен старый
размер * 1.5 (или иной коэффициент) — это называется механизмом амортизации.
